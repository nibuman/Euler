# Problem 12 Highly divisible triangular number
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#     1: 1
#     3: 1,3
#     6: 1,2,3,6
#    10: 1,2,5,10
#    15: 1,3,5,15
#    21: 1,3,7,21
#    28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?


from progress.bar import Bar
import time

divisor_target = 500

tn = 1
index = 1
current_divisors = 0

bar = Bar('Processing', max=500)
current_heighest = 0
start_point = 1
start_time = time.time()
while(current_divisors < divisor_target):
    search_limit = tn / 2 #no divisors above tn/2 apart from tn itself
    d = 2 #start dividing from 2 - all are divisible by 1
    current_divisors = 2 # set to 2 to account for fact that all numbers divisible by themselves and 1
    if(tn > start_point):
        while(d < search_limit):
            if(tn % d == 0):
                current_divisors += 2 #assumes that it will be divisible by d and tn/d - doesn't account for squares!
                search_limit = tn / d 
            d += 1
    index += 1
    tn += index
    if(current_divisors > current_heighest):
        diff = current_divisors - current_heighest
        for x in range(diff):
            bar.next()
        current_heighest = current_divisors

bar.finish()
print("tn = ", tn - index)
print("index = ", index - 1)
print("divisors = ", current_heighest)
print("--- %s seconds ---" % (time.time() - start_time))        


